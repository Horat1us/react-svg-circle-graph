{"version":3,"sources":["components/svg-circle-arc.tsx","components/circle-chart.tsx","presentation/state.tsx","presentation/input.tsx","presentation/layout.tsx","index.tsx","app.tsx"],"names":["SvgCircleArc","React","ref","angle","radius","r","childProps","rad","Math","min","abs","pow","PI","d","Number","cos","sin","join","CircleChart","color1","color2","border","xmlns","viewBox","id","offset","stopColor","fill","strokeWidth","stroke","transform","initialState","reducer","prevState","attribute","value","Input","dispatch","unit","type","Object","assign","step","max","className","htmlFor","onChange","event","includes","parseInt","currentTarget","Layout","state","height","displayName","ReactDOM","render","role","href","target","rel","document","getElementById"],"mappings":"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","file":"static/js/main.b98c7bd9.chunk.js","sourcesContent":["import * as React from \"react\";\n\ntype SvgCircleArcProps =\n    {\n        angle: number;\n        r: number;\n    }\n    & React.SVGProps<SVGPathElement>\n    & Pick<React.SVGProps<SVGCircleElement>, keyof React.SVGProps<SVGPathElement>>;\n\n\nexport const SvgCircleArc = React.forwardRef<SVGPathElement | SVGCircleElement, SvgCircleArcProps>(\n    (\n        { angle, r: radius, ...childProps },\n        ref\n    ) => {\n        if (angle === 0) {\n            return null;\n        }\n        angle = Math.min(360, Math.abs(angle)) // transform >360 angles to 360\n            * Math.pow(angle, 0); // support <0 angles\n        const rad = angle * Math.PI / 180;\n\n        const d = [\n            \"M\", radius, 0,\n            \"A\", radius, radius, 0, Number(angle >= 180), 1,\n            Math.cos(rad) * radius, Math.sin(rad) * radius,\n        ];\n        return <path  {...childProps} ref={ref as React.Ref<SVGPathElement>} d={d.join(\" \")}/>;\n    }\n);\n","import * as React from \"react\";\nimport { SvgCircleArc } from \"../components/svg-circle-arc\";\n\nexport interface CircleChartProps {\n    angle: number;\n    radius: number;\n    border: number;\n    color1: string;\n    color2: string;\n}\n\nexport type CircleChartSVGProps =\n    CircleChartProps & React.SVGProps<SVGSVGElement>;\n\nexport const CircleChart = React.forwardRef<SVGSVGElement, CircleChartSVGProps>(\n    (\n        { color1, color2, angle, border, radius, ...childProps },\n        ref,\n    ) => {\n        return (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-50 -50 300 200\" {...childProps} ref={ref}>\n                <defs>\n                    <linearGradient id=\"grad1\">\n                        <stop offset=\"0\" stopColor=\"yellow\"/>\n                        <stop offset=\"25%\" stopColor={color2}/>\n                    </linearGradient>\n                </defs>\n                <SvgCircleArc\n                    r={radius}\n                    fill=\"none\"\n                    strokeWidth={border}\n                    stroke={color2}\n                    angle={angle * 1.2}\n                    transform=\"rotate(90)\"\n                />\n                <SvgCircleArc\n                    r={radius}\n                    angle={360 - angle * 0.8}\n                    fill=\"none\"\n                    strokeWidth={border}\n                    stroke={color1}\n                    transform=\"rotate(-135) scale(.75)\"\n                />\n                <g transform={`translate(${radius * 2 + border * 4}, 0)`}>\n                    <SvgCircleArc\n                        r={radius}\n                        angle={Math.min(180, angle)}\n                        fill=\"none\"\n                        strokeWidth={border}\n                        stroke=\"url(#grad1)\"\n                        transform={`rotate(-90)`}\n                    />\n                    {angle > 180 && <SvgCircleArc\n                        r={radius}\n                        angle={angle - 180}\n                        fill=\"none\"\n                        strokeWidth={border}\n                        stroke={color1}\n                        transform={`rotate(90)`}\n                    />}\n                </g>\n            </svg>\n        )\n    }\n);\n\n","import * as React from \"react\";\n\nexport interface State {\n    angle: number;\n    border: number;\n    radius: number;\n    color1: string;\n    color2: string;\n}\n\nexport const initialState: Readonly<State> = {\n    angle: 145,\n    border: 5,\n    radius: 45,\n    color1: \"#FFFF00\",\n    color2: \"#2E2EFE\",\n};\n\nexport type Action<TKey extends keyof State = keyof State> = {\n    attribute: TKey;\n    value: State[TKey];\n};\nexport type Dispatch = React.Dispatch<Action>;\nexport type Reducer = React.Reducer<State, Action>;\nexport const reducer: Reducer = (prevState, { attribute, value }) => {\n    if (prevState[ attribute ] === value) {\n        return prevState;\n    }\n    return {\n        ...prevState,\n        [ attribute ]: value,\n    };\n};\n","import * as React from \"react\";\nimport { Dispatch, State } from \"./state\";\n\nexport type InputProps = { dispatch: Dispatch, value: State[keyof State], attribute: keyof State, unit: string };\n\nexport const Input: React.FC<InputProps & React.HTMLProps<HTMLInputElement>> =\n    ({ dispatch, value, attribute, unit, ...childProps }) => {\n        const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = [\"range\", \"number\"].includes(childProps.type as string)\n                ? parseInt(event.currentTarget.value, 10)\n                : event.currentTarget.value;\n            dispatch({ attribute: attribute, value });\n        };\n        switch (childProps.type) {\n            case \"range\":\n                Object.assign(childProps, {\n                    ...childProps,\n                    step: 1,\n                    min: 1,\n                    max: 100,\n                });\n                break;\n        }\n        const id = `${attribute}Input`;\n        return <div className=\"form-group\">\n            <label htmlFor={id}>\n                Select {attribute} <span className=\"badge badge-secondary\">{value}{unit}</span>\n            </label>\n            <input\n                className=\"form-control-range\" id={id}\n                value={value}\n                onChange={handleChange}\n                {...childProps}\n            />\n        </div>\n    };\n","import * as React from \"react\";\nimport { CircleChart } from \"../components/circle-chart\";\nimport { initialState, reducer, Reducer } from \"./state\";\nimport { Input } from \"./input\";\n\nexport const Layout: React.FC<{}> = React.memo(() => {\n    const [state, dispatch] = React.useReducer<Reducer>(reducer, initialState);\n    return (\n        <article>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"card text-white bg-dark mb-3\">\n                        <div className=\"card-header\">Demonstration</div>\n                        <div className=\"card-body\">\n                            <CircleChart height=\"200px\" {...state}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <Input dispatch={dispatch} value={state.angle} attribute=\"angle\" unit=\"°\" max={360} min={1} type=\"range\"/>\n                    <Input dispatch={dispatch} value={state.border} attribute=\"border\" unit=\"px\" max={10} type=\"range\"/>\n                    <Input dispatch={dispatch} value={state.radius} attribute=\"radius\" unit=\"px\" max={100} type=\"range\"/>\n                    <Input dispatch={dispatch} value={state.color1} attribute=\"color1\" unit=\"\" type=\"color\"/>\n                    <Input dispatch={dispatch} value={state.color2} attribute=\"color2\" unit=\"\" type=\"color\"/>\n                </div>\n            </div>\n\n        </article>\n    )\n});\nLayout.displayName = \"Presentation.Layout\";\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App }  from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React from \"react\";\nimport * as Presentation from \"./presentation\";\n\nexport function App() {\n    return (\n        <main role=\"main\" className=\"flex-shrink-0\">\n            <div className=\"container\">\n                <h1 className=\"mt-5 display-4\">React SVG Circle Chart</h1>\n                <p className=\"lead\">Change values to interact with chart.</p>\n                <Presentation.Layout />\n                <p>\n                    Available on <a\n                    href=\"https://github.com/Horat1us/react-svg-circle-graph\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    GitHub\n                </a> | <a\n                    href=\"https://github.com/Horat1us/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Horat1us\n                </a>\n                </p>\n            </div>\n        </main>\n    );\n}\n"],"sourceRoot":""}