{"version":3,"sources":["components/svg-circle-arc.tsx","components/circle-chart.tsx","Presentation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SvgCircleArc","React","ref","angle","radius","r","childProps","rad","Math","min","abs","pow","PI","d","Number","cos","sin","join","CircleChart","border","xmlns","viewBox","id","offset","stopColor","fill","strokeWidth","stroke","transform","initialState","reducer","prevState","attribute","value","InputRange","dispatch","unit","className","htmlFor","type","step","max","onChange","event","parseInt","currentTarget","Presentation","state","height","App","role","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAWaA,EAAeC,cACxB,WAEIC,GACE,IAFAC,EAED,EAFCA,MAAUC,EAEX,EAFQC,EAAcC,EAEtB,6BACD,GAAc,IAAVH,EACA,OAAO,KAIX,IAAMI,GAFNJ,EAAQK,KAAKC,IAAI,IAAKD,KAAKE,IAAIP,IACzBK,KAAKG,IAAIR,EAAO,IACFK,KAAKI,GAAK,IACxBC,EAAI,CACN,IAAKT,EAAQ,EACb,IAAKA,EAAQA,EAAQ,EAAGU,OAAOX,GAAS,KAAM,EAC9CK,KAAKO,IAAIR,GAAOH,EAAQI,KAAKQ,IAAIT,GAAOH,GAE5C,OAAO,wCAAWE,EAAX,CAAuBJ,IAAKA,EAAkCW,EAAGA,EAAEI,KAAK,WCf1EC,EAAcjB,cACvB,WAEIC,GACE,IAFAC,EAED,EAFCA,MAAOgB,EAER,EAFQA,OAAQf,EAEhB,EAFgBA,OAAWE,EAE3B,2CACD,OACI,qCAAKc,MAAM,6BAA6BC,QAAQ,mBAAsBf,EAAtE,CAAkFJ,IAAKA,IACnF,4BACI,kCAAgBoB,GAAG,SACf,wBAAMC,OAAO,IAAIC,UAAU,WAC3B,wBAAMD,OAAO,MAAMC,UAAU,WAGrC,gBAACxB,EAAD,CACIK,EAAGD,EACHqB,KAAK,OACLC,YAAaP,EACbQ,OAAO,OACPxB,MAAe,IAARA,EACPyB,UAAU,eAEd,gBAAC5B,EAAD,CACIK,EAAGD,EACHD,MAAO,IAAc,GAARA,EACbsB,KAAK,OACLC,YAAaP,EACbQ,OAAO,SACPC,UAAU,4BAEd,qBAAGA,UAAS,oBAAwB,EAATxB,EAAsB,EAATe,EAA5B,SACR,gBAACnB,EAAD,CACIK,EAAGD,EACHD,MAAOK,KAAKC,IAAI,IAAKN,GACrBsB,KAAK,OACLC,YAAaP,EACbQ,OAAO,cACPC,UAAS,gBAEZzB,EAAQ,KAAO,gBAACH,EAAD,CACZK,EAAGD,EACHD,MAAOA,EAAQ,IACfsB,KAAK,OACLC,YAAaP,EACbQ,OAAO,SACPC,UAAS,oBC9CpBC,EAAsB,CAC/B1B,MAAO,IACPgB,OAAQ,EACRf,OAAQ,IASC0B,EAAmB,SAACC,EAAD,GAAsC,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MACrD,OAAIF,EAAWC,KAAgBC,EACpBF,EAEJ,eACAA,EADP,eAEMC,EAAaC,KAGVC,EACT,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,SAAUF,EAA4C,EAA5CA,MAAOD,EAAqC,EAArCA,UAAWI,EAA0B,EAA1BA,KAAS9B,EAAiB,uDAK/CgB,EAAE,UAAMU,EAAN,SACR,OAAO,uBAAKK,UAAU,cAClB,yBAAOC,QAAShB,GAAhB,UACYU,EADZ,IACuB,wBAAMK,UAAU,yBAAyBJ,EAAOG,IAEvE,uCACIG,KAAK,QAAQC,KAAM,EAAG/B,IAAK,EAAGgC,IAAK,IAAKJ,UAAU,qBAAqBf,GAAG,cAC1EW,MAAOA,EACPS,SAZa,SAACC,GAClB,IAAMV,EAAQW,SAASD,EAAME,cAAcZ,MAAO,IAClDE,EAAS,CAAEH,UAAWA,EAAWC,YAWzB3B,MAKPwC,EAA6B,WAAO,IAAD,EAClB7C,aAA0B6B,EAASD,GADjB,mBACrCkB,EADqC,KAC9BZ,EAD8B,KAG5C,OACI,+BACI,uBAAKE,UAAU,OACX,uBAAKA,UAAU,mBACX,uBAAKA,UAAU,gCACX,uBAAKA,UAAU,eAAf,iBACA,uBAAKA,UAAU,aACX,gBAACnB,EAAD,eAAa8B,OAAO,SAAYD,OAI5C,uBAAKV,UAAU,mBACX,gBAAC,EAAD,CAAYF,SAAUA,EAAUF,MAAOc,EAAM5C,MAAO6B,UAAU,QAAQI,KAAK,OAAIK,IAAK,IAAKhC,IAAK,IAC9F,gBAAC,EAAD,CAAY0B,SAAUA,EAAUF,MAAOc,EAAM5B,OAAQa,UAAU,SAASI,KAAK,KAAKK,IAAK,KACvF,gBAAC,EAAD,CAAYN,SAAUA,EAAUF,MAAOc,EAAM3C,OAAQ4B,UAAU,SAASI,KAAK,KAAKK,IAAK,UCtC5FQ,MA3Bf,WACI,OACI,0BAAMC,KAAK,OAAOb,UAAU,iBACxB,yBAAKA,UAAU,aACX,wBAAIA,UAAU,kBAAd,0BACA,uBAAGA,UAAU,QAAb,yCACA,kBAAC,EAAD,MACA,2CACiB,uBACbc,KAAK,qDACLC,OAAO,SACPC,IAAI,uBAHS,UADjB,MAOO,uBACHF,KAAK,+BACLC,OAAO,SACPC,IAAI,uBAHD,gBCLHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5f341ba1.chunk.js","sourcesContent":["import * as React from \"react\";\n\ntype SvgCircleArcProps =\n    {\n        angle: number;\n        r: number;\n    }\n    & React.SVGProps<SVGPathElement>\n    & Pick<React.SVGProps<SVGCircleElement>, keyof React.SVGProps<SVGPathElement>>;\n\n\nexport const SvgCircleArc = React.forwardRef<SVGPathElement | SVGCircleElement, SvgCircleArcProps>(\n    (\n        { angle, r: radius, ...childProps },\n        ref\n    ) => {\n        if (angle === 0) {\n            return null;\n        }\n        angle = Math.min(360, Math.abs(angle)) // transform >360 angles to 360\n            * Math.pow(angle, 0); // support <0 angles\n        const rad = angle * Math.PI / 180;\n        const d = [\n            \"M\", radius, 0,\n            \"A\", radius, radius, 0, Number(angle >= 180), 1,\n            Math.cos(rad) * radius, Math.sin(rad) * radius,\n        ];\n        return <path  {...childProps} ref={ref as React.Ref<SVGPathElement>} d={d.join(\" \")}/>;\n    }\n);\n","import * as React from \"react\";\nimport { SvgCircleArc } from \"../components/svg-circle-arc\";\n\nexport interface CircleChartProps {\n    angle: number;\n    radius: number;\n    border: number;\n}\n\nexport type CircleChartSVGProps =\n    CircleChartProps & React.SVGProps<SVGSVGElement>;\n\nexport const CircleChart = React.forwardRef<SVGSVGElement, CircleChartSVGProps>(\n    (\n        { angle, border, radius, ...childProps },\n        ref,\n    ) => {\n        return (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-50 -50 300 200\" {...childProps} ref={ref}>\n                <defs>\n                    <linearGradient id=\"grad1\">\n                        <stop offset=\"0\" stopColor=\"yellow\"/>\n                        <stop offset=\"25%\" stopColor=\"blue\"/>\n                    </linearGradient>\n                </defs>\n                <SvgCircleArc\n                    r={radius}\n                    fill=\"none\"\n                    strokeWidth={border}\n                    stroke=\"blue\"\n                    angle={angle * 1.2}\n                    transform=\"rotate(90)\"\n                />\n                <SvgCircleArc\n                    r={radius}\n                    angle={360 - angle * 0.8}\n                    fill=\"none\"\n                    strokeWidth={border}\n                    stroke=\"yellow\"\n                    transform=\"rotate(-135) scale(.75)\"\n                />\n                <g transform={`translate(${radius * 2 + border * 4}, 0)`}>\n                    <SvgCircleArc\n                        r={radius}\n                        angle={Math.min(180, angle)}\n                        fill=\"none\"\n                        strokeWidth={border}\n                        stroke=\"url(#grad1)\"\n                        transform={`rotate(-90)`}\n                    />\n                    {angle > 180 && <SvgCircleArc\n                        r={radius}\n                        angle={angle - 180}\n                        fill=\"none\"\n                        strokeWidth={border}\n                        stroke=\"yellow\"\n                        transform={`rotate(90)`}\n                    />}\n                </g>\n            </svg>\n        )\n    }\n);\n\n","import * as React from \"react\";\nimport { CircleChart } from \"./components/circle-chart\";\n\nexport interface State {\n    angle: number;\n    border: number;\n    radius: number;\n    fill: string;\n}\n\nexport const initialState: State = {\n    angle: 145,\n    border: 5,\n    radius: 45,\n} as Readonly<State>;\n\nexport type Action<TKey extends keyof State = keyof State> = {\n    attribute: TKey;\n    value: State[TKey];\n};\nexport type Dispatch = React.Dispatch<Action>;\nexport type Reducer = React.Reducer<State, Action>;\nexport const reducer: Reducer = (prevState, { attribute, value }) => {\n    if (prevState[ attribute ] === value) {\n        return prevState;\n    }\n    return {\n        ...prevState,\n        [ attribute ]: value,\n    };\n};\nexport const InputRange: React.FC<{ dispatch: Dispatch, value: State[keyof State], attribute: keyof State, unit: string } & React.HTMLProps<HTMLInputElement>> =\n    ({ dispatch, value, attribute, unit, ...childProps }) => {\n        const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n            const value = parseInt(event.currentTarget.value, 10);\n            dispatch({ attribute: attribute, value });\n        };\n        const id = `${attribute}Input`;\n        return <div className=\"form-group\">\n            <label htmlFor={id}>\n                Select {attribute} <span className=\"badge badge-secondary\">{value}{unit}</span>\n            </label>\n            <input\n                type=\"range\" step={1} min={1} max={100} className=\"form-control-range\" id=\"radiusInput\"\n                value={value}\n                onChange={handleChange}\n                {...childProps}\n            />\n        </div>\n    };\n\nexport const Presentation: React.FC<{}> = () => {\n    const [state, dispatch] = React.useReducer<Reducer>(reducer, initialState);\n\n    return (\n        <article>\n            <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                    <div className=\"card text-white bg-dark mb-3\">\n                        <div className=\"card-header\">Demonstration</div>\n                        <div className=\"card-body\">\n                            <CircleChart height=\"200px\" {...state}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12 col-md-6\">\n                    <InputRange dispatch={dispatch} value={state.angle} attribute=\"angle\" unit=\"Â°\" max={360} min={1}/>\n                    <InputRange dispatch={dispatch} value={state.border} attribute=\"border\" unit=\"px\" max={10}/>\n                    <InputRange dispatch={dispatch} value={state.radius} attribute=\"radius\" unit=\"px\" max={100}/>\n                </div>\n            </div>\n\n        </article>\n    )\n};\n","import React from \"react\";\nimport { Presentation } from \"./Presentation\";\n\nfunction App() {\n    return (\n        <main role=\"main\" className=\"flex-shrink-0\">\n            <div className=\"container\">\n                <h1 className=\"mt-5 display-4\">React SVG Circle Chart</h1>\n                <p className=\"lead\">Change values to interact with chart.</p>\n                <Presentation />\n                <p>\n                    Available on <a\n                    href=\"https://github.com/Horat1us/react-svg-circle-graph\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    GitHub\n                </a> | <a\n                    href=\"https://github.com/Horat1us/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Horat1us\n                </a>\n                </p>\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}